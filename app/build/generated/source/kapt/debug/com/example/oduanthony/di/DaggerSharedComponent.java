// Generated by Dagger (https://dagger.dev).
package com.example.oduanthony.di;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.example.oduanthony.BaseApplication;
import com.example.oduanthony.DownloadProgress;
import com.example.oduanthony.DownloadProgress_Factory;
import com.example.oduanthony.MainActivity;
import com.example.oduanthony.di.module.NetworkModule;
import com.example.oduanthony.di.module.NetworkModule_ContextFactory;
import com.example.oduanthony.di.module.NetworkModule_ProvideBalanceService$app_debugFactory;
import com.example.oduanthony.di.module.NetworkModule_ProvideRetrofit$app_debugFactory;
import com.example.oduanthony.di.module.SharedModule;
import com.example.oduanthony.repository.FilterRepo;
import com.example.oduanthony.repository.FilterRepo_Factory;
import com.example.oduanthony.screens.carowner.CarOwnerFragment;
import com.example.oduanthony.screens.carowner.CarOwnerFragment_MembersInjector;
import com.example.oduanthony.screens.carowner.CarOwnerViewModel;
import com.example.oduanthony.screens.carowner.CarOwnerViewModel_Factory;
import com.example.oduanthony.screens.filter.FilterFragment;
import com.example.oduanthony.screens.filter.FilterFragment_MembersInjector;
import com.example.oduanthony.screens.filter.FilterViewModel;
import com.example.oduanthony.screens.filter.FilterViewModel_Factory;
import com.example.oduanthony.screens.filter.ViewModelFactory;
import com.example.oduanthony.service.ApiService;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSharedComponent implements SharedComponent {
  private Provider<Retrofit> provideRetrofit$app_debugProvider;

  private Provider<ApiService> provideBalanceService$app_debugProvider;

  private Provider<FilterRepo> filterRepoProvider;

  private Provider<CarOwnerViewModel> carOwnerViewModelProvider;

  private Provider<Context> contextProvider;

  private Provider<DownloadProgress> downloadProgressProvider;

  private Provider<FilterViewModel> filterViewModelProvider;

  private DaggerSharedComponent(NetworkModule networkModuleParam) {

    initialize(networkModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
      ) {
    return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2).put(CarOwnerViewModel.class, (Provider) carOwnerViewModelProvider).put(FilterViewModel.class, (Provider) filterViewModelProvider).build();}

  private ViewModelFactory getViewModelFactory() {
    return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

  @SuppressWarnings("unchecked")
  private void initialize(final NetworkModule networkModuleParam) {
    this.provideRetrofit$app_debugProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofit$app_debugFactory.create(networkModuleParam));
    this.provideBalanceService$app_debugProvider = DoubleCheck.provider(NetworkModule_ProvideBalanceService$app_debugFactory.create(networkModuleParam, provideRetrofit$app_debugProvider));
    this.filterRepoProvider = FilterRepo_Factory.create(provideBalanceService$app_debugProvider);
    this.carOwnerViewModelProvider = CarOwnerViewModel_Factory.create(filterRepoProvider);
    this.contextProvider = NetworkModule_ContextFactory.create(networkModuleParam);
    this.downloadProgressProvider = DownloadProgress_Factory.create(contextProvider);
    this.filterViewModelProvider = FilterViewModel_Factory.create(filterRepoProvider, downloadProgressProvider);
  }

  @Override
  public void inject(BaseApplication application) {
  }

  @Override
  public void inject(MainActivity application) {
  }

  @Override
  public void inject(FilterFragment fragment) {
    injectFilterFragment(fragment);}

  @Override
  public void inject(CarOwnerFragment fragment) {
    injectCarOwnerFragment(fragment);}

  private FilterFragment injectFilterFragment(FilterFragment instance) {
    FilterFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  private CarOwnerFragment injectCarOwnerFragment(CarOwnerFragment instance) {
    CarOwnerFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  public static final class Builder {
    private NetworkModule networkModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder sharedModule(SharedModule sharedModule) {
      Preconditions.checkNotNull(sharedModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public SharedComponent build() {
      Preconditions.checkBuilderRequirement(networkModule, NetworkModule.class);
      return new DaggerSharedComponent(networkModule);
    }
  }
}
